searchState.loadedDescShard("attributes", 0, "Comprehensive demonstration of Rust attributes and …\nAvailable only when targeting ARM architecture\nA struct with C-compatible memory layout\nA struct with common derives\nA struct that must be used once created\nA union type (unsafe)\nA struct with packed memory layout (no padding)\nAn enum with explicit discriminant representation\nA transparent wrapper around a single field\nA function that should always be inlined\nA function that should not be mangled (for FFI)\nAvailable only in debug builds\nA function with detailed documentation This function …\nA function that is unlikely to be called (cold path)\nA function with a custom must_use message\nA function that should be aggressively inlined\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA function whose return value must be used\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA function with specific lint configuration\nA function that denies certain warnings\nA function that should never be inlined\nA deprecated function with a message\nA function with a custom export name\nAvailable only on Unix-like systems\nA function that warns about unused variables\nA module that’s always compiled but with specific …\nA deprecated utility\nA utility function that might not be used")