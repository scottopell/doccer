---
source: tests/integration_tests.rs
expression: output
---
# Crate: generics

Version: 0.1.0

Generics fixture for testing doccer

This crate contains generic types, lifetimes, and constraints
to validate advanced parsing functionality.

  /// A generic container that holds a value
  pub struct Container<T> {
    pub value: T

    /// Creates a new container
    pub fn new(value: T) -> Self

    /// Gets a reference to the contained value
    pub fn get(&self) -> &T

    /// Consumes the container and returns the value
    pub fn into_inner(self) -> T
  }

  /// A generic pair of values
  pub struct Pair<T, U> {
    pub first: T
    pub second: U
  }

  /// A trait for types that can be compared
  pub trait Comparable<T> {

    /// Compare this value with another
    fn compare(&self, other: &T) -> std::cmp::Ordering
  }

  /// A generic result type with constraints
  pub struct Result<T, E> where T: Clone, E: Display {

    /// Creates a successful result
    pub fn ok(value: T) -> Self

    /// Creates an error result
    pub fn err(error: E) -> Self
  }

  /// A function with lifetime parameters
  pub fn longest<'a>(x: &'a str, y: &'a str) -> &'a str

  /// A struct with lifetime parameters
  pub struct Reference<'a> {
    pub data: &'a str

    /// Creates a new reference
    pub fn new(data: &'a str) -> Self
  }

  /// Associated types example
  pub trait Iterator {

    /// The type of items yielded by the iterator
    type Item

    /// Get the next item
    fn next(&mut self) -> Option<Self::Item>
  }

  /// Generic associated constants
  pub trait Constants<T> {

    /// A default value
    const DEFAULT: T

    /// Maximum value
    const MAX: T
  }
