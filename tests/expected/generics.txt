# Crate: generics

Version: 0.1.0

Generics fixture for testing doccer

This crate contains generic types, lifetimes, and constraints
to validate advanced parsing functionality.

  pub struct Container<T> { ... }
    /// A generic container that holds a value

      pub fn new(value: T) -> Self
        /// Creates a new container

      pub fn get(&self) -> &T
        /// Gets a reference to the contained value

      pub fn into_inner(self) -> T
        /// Consumes the container and returns the value

  pub struct Pair<T, U> { ... }
    /// A generic pair of values

  pub trait Comparable<T> { ... }
    /// A trait for types that can be compared

    fn compare(&self, other: &T) -> std::cmp::Ordering
      /// Compare this value with another

  pub struct Result<T, E> where T: Clone, E: Display { ... }
    /// A generic result type with constraints

      pub fn ok(value: T) -> Self
        /// Creates a successful result

      pub fn err(error: E) -> Self
        /// Creates an error result

  pub fn longest<'a>(x: &'a str, y: &'a str) -> &'a str
    /// A function with lifetime parameters

  pub struct Reference<'a> { ... }
    /// A struct with lifetime parameters

      pub fn new(data: &'a str) -> Self
        /// Creates a new reference

  pub trait Iterator { ... }
    /// Associated types example

    type Item
      /// The type of items yielded by the iterator

    fn next(&mut self) -> Option<Self::Item>
      /// Get the next item

  pub trait Constants<T> { ... }
    /// Generic associated constants

    const DEFAULT: T
      /// A default value

    const MAX: T
      /// Maximum value